commit d2894cc12eab41ddf20092b98fd868882a89bb8d
Author: Jonathan Perkin <jperkin@joyent.com>
Date:   Mon Apr 9 12:08:48 2018 +0100

    Apply changes required for pkgin-test-suite.
    
    This is a combination of the following commits:
    
      https://github.com/NetBSDfr/pkgin/commit/1a1f4fbd1372f83e7b5abe5fd8a4d71e6c6fdbcd
      https://github.com/NetBSDfr/pkgin/commit/f3b9d98e5bf248a4f90d378f6b07eb99f46e7321
      https://github.com/NetBSDfr/pkgin/commit/84dddcf0dba02784d430fd42834f12c9bda82b7d
    
    which introduce support for PKGIN_DBDIR and PKG_INSTALL_DIR environment
    variables, with some modifications required to apply these patches
    against older releases.

diff --git a/Makefile.in b/Makefile.in
index cb19be6..544d203 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -6,10 +6,11 @@ VERSION=	@PACKAGE_VERSION@
 SRCS=		main.c summary.c tools.c pkgindb.c depends.c actions.c \
 		pkglist.c download.c order.c impact.c autoremove.c fsops.c \
 		pkgindb_queries.c pkg_str.c sqlite_callbacks.c selection.c \
-		pkg_check.c pkg_infos.c
+		pkg_check.c pkg_infos.c pkg_install.c
 # included from libinstall
 SRCS+=		automatic.c decompress.c dewey.c fexec.c global.c \
 		opattern.c pkgdb.c var.c
+SRCS+=		xwrapper.c
 # included from openssh
 SRCS+=		progressmeter.c
 
@@ -36,10 +37,6 @@ LOCALBASE?=		@prefix@
 BINDIR?=		${LOCALBASE}/bin
 PKG_SYSCONFDIR?=	${LOCALBASE}/etc
 VARBASE?=		/var
-PKG_DBDIR?=		${VARBASE}/db/pkg
-.if !defined(PKGMANDIR)
-MANDIR=		${LOCALBASE}/share/man
-.endif
 
 # read pkginstall-prefix from configure if any
 .if "@PKGTOOLS@"
@@ -63,9 +60,9 @@ CPPFLAGS+=	-DPKGIN_VERSION=\"${PKGIN_VERSION}\"
 
 .if defined(DEBUG)
 CPPFLAGS+=	-DDEBUG
-PKGIN_DB!=	pwd
+PKGIN_DBDIR!=	pwd
 .else
-PKGIN_DB=	${VARBASE}/db/pkgin
+PKGIN_DBDIR=	${VARBASE}/db/pkgin
 .endif
 
 .if ${OPSYS} == "NetBSD"
@@ -78,9 +75,7 @@ CPPFLAGS+=	-g
 
 CPPFLAGS+=	-DLOCALBASE=\"${LOCALBASE}\" 			\
 		-DPKG_SYSCONFDIR=\"${PKG_SYSCONFDIR}\"		\
-		-DPKG_DBDIR="\"${PKG_DBDIR}\""			\
-		-DDEF_LOG_DIR="\"${PKG_DBDIR}\""		\
-		-DPKGIN_DB=\"${PKGIN_DB}\"			\
+		-DPKGIN_DBDIR=\"${PKGIN_DBDIR}\"		\
 		-DPKGTOOLS=\"${PKGTOOLS}\"
 
 CPPFLAGS+=	-DHAVE_CONFIG_H
diff --git a/actions.c b/actions.c
index 9dda865..0e19b20 100644
--- a/actions.c
+++ b/actions.c
@@ -37,7 +37,6 @@
 #define LOCALBASE "/usr/pkg" /* see DISCLAIMER below */
 #endif
 
-const char	*pkgin_cache = PKGIN_CACHE;
 static int	upgrade_type = UPGRADE_NONE, warn_count = 0, err_count = 0;
 static uint8_t	said = 0;
 FILE		*err_fp = NULL;
@@ -134,7 +133,7 @@ pkg_download(Plisthead *installhead)
 }
 
 /**
- * \brief Analyse PKG_INSTALL_ERR_LOG for warnings
+ * \brief Analyse pkgin_errlog for warnings
  */
 static void
 analyse_pkglog(long int filepos)
@@ -145,7 +144,7 @@ analyse_pkglog(long int filepos)
 	if (filepos < 0)
 		return;
 
-	err_ro = fopen(PKG_INSTALL_ERR_LOG, "r");
+	err_ro = fopen(pkgin_errlog, "r");
 
 	(void)fseek(err_ro, filepos, SEEK_SET);
 
@@ -165,7 +164,7 @@ analyse_pkglog(long int filepos)
 }
 
 /**
- * \brief Tags PKG_INSTALL_ERR_LOG with date
+ * \brief Tags pkgin_errlog with date
  */
 #define DATELEN 64
 
@@ -197,9 +196,9 @@ static void
 open_pi_log(void)
 {
 	if (!verbosity && !said) {
-		if ((err_fp = fopen(PKG_INSTALL_ERR_LOG, "a")) == NULL) {
+		if ((err_fp = fopen(pkgin_errlog, "a")) == NULL) {
  			fprintf(stderr, MSG_CANT_OPEN_WRITE,
-				PKG_INSTALL_ERR_LOG);
+				pkgin_errlog);
 			exit(EXIT_FAILURE);
 		}
 
@@ -217,7 +216,7 @@ close_pi_log(void)
 		analyse_pkglog(rm_filepos);
 		printf(MSG_WARNS_ERRS, warn_count, err_count);
 		if (warn_count > 0 || err_count > 0)
-			printf(MSG_PKG_INSTALL_LOGGING_TO, PKG_INSTALL_ERR_LOG);
+			printf(MSG_PKG_INSTALL_LOGGING_TO, pkgin_errlog);
 	}
 }
 
@@ -249,7 +248,7 @@ do_pkg_remove(Plisthead *removehead)
 #ifndef DEBUG
 		if (!verbosity)
 			log_tag(MSG_REMOVING, premove->depend);
-		if (fexec(PKG_DELETE, verb_flag("-f"), premove->depend, NULL)
+		if (fexec(pkg_delete, verb_flag("-f"), premove->depend, NULL)
 			!= EXIT_SUCCESS)
 			err_count++;
 #endif
@@ -298,7 +297,7 @@ do_pkg_install(Plisthead *installhead)
 		/* there was a previous version, record +PRESERVE path */
 		if (pinstall->old != NULL)
 			snprintf(preserve, BUFSIZ, "%s/%s/%s",
-				PKG_DBDIR, pinstall->old, PRESERVE_FNAME);
+				pkgdb_get_dir(), pinstall->old, PRESERVE_FNAME);
 
 		/* are we upgrading pkg_install ? */
 		if (pi_upgrade) { /* set in order.c */
@@ -319,7 +318,7 @@ do_pkg_install(Plisthead *installhead)
 			/* every other package */
 			pflags = verb_flag("-D");
 
-		if (fexec(PKG_ADD, pflags, pkgpath, NULL) == EXIT_FAILURE)
+		if (fexec(pkg_add, pflags, pkgpath, NULL) == EXIT_FAILURE)
 			rc = EXIT_FAILURE;
 #endif
 	} /* installation loop */
@@ -360,6 +359,7 @@ pkgin_install(char **opkgargs, uint8_t do_inst)
 {
 	int		installnum = 0, upgradenum = 0, removenum = 0;
 	int		rc = EXIT_SUCCESS;
+	int		privsreqd = PRIVS_PKGINDB;
 	uint64_t	file_size = 0, free_space;
 	int64_t		size_pkg = 0;
 	Pkglist		*premove, *pinstall;
@@ -379,6 +379,12 @@ pkgin_install(char **opkgargs, uint8_t do_inst)
 		return rc;
 	}
 
+	if (do_inst)
+		privsreqd |= PRIVS_PKGDB;
+
+	if (!have_privs(privsreqd))
+		errx(EXIT_FAILURE, MSG_DONT_HAVE_RIGHTS);
+
 	/* full impact list */
 	if ((impacthead = pkg_impact(pkgargs, &rc)) == NULL) {
 		printf(MSG_NOTHING_TO_DO);
diff --git a/autoremove.c b/autoremove.c
index e58dc19..2bb9503 100644
--- a/autoremove.c
+++ b/autoremove.c
@@ -84,7 +84,7 @@ pkgin_autoremove()
 			}
 		}
 		snprintf(preserve, BUFSIZ, "%s/%s/%s",
-				PKG_DBDIR, pkglist->full, PRESERVE_FNAME);
+				pkgdb_get_dir(), pkglist->full, PRESERVE_FNAME);
 		/* is or a dependency or a preserved package */
 		if (is_keep_dep || access(preserve, F_OK) != -1)
 			continue;
@@ -183,7 +183,7 @@ pkg_keep(int type, char **pkgargs)
 	Pkglist	*pkglist = NULL;
 	char   	**pkeep, *pkgname, query[BUFSIZ];
 
-	if (!have_enough_rights())
+	if (!have_privs(PRIVS_PKGDB|PRIVS_PKGINDB))
 		errx(EXIT_FAILURE, MSG_DONT_HAVE_RIGHTS);
 
 	if (SLIST_EMPTY(&l_plisthead)) /* no packages recorded */
diff --git a/external/lib.h b/external/lib.h
index a028574..b4cfa1e 100644
--- a/external/lib.h
+++ b/external/lib.h
@@ -422,18 +422,8 @@ void    append_plist(package_t *, FILE *);
 int     delete_package(Boolean, Boolean, package_t *, Boolean);
 
 /* Package Database */
-int     pkgdb_open(int);
-void    pkgdb_close(void);
-int     pkgdb_store(const char *, const char *);
-char   *pkgdb_retrieve(const char *);
-int	pkgdb_dump(void);
-int     pkgdb_remove(const char *);
-int	pkgdb_remove_pkg(const char *);
-char   *pkgdb_refcount_dir(void);
-char   *_pkgdb_getPKGDB_FILE(char *, unsigned);
-const char *_pkgdb_getPKGDB_DIR(void);
-void	_pkgdb_setPKGDB_DIR(const char *);
-
+const char   *pkgdb_get_dir(void);
+void	pkgdb_set_dir(const char *, int);
 char   *pkgdb_pkg_file(const char *, const char *);
 
 /* List of packages functions */
@@ -450,6 +440,18 @@ struct pkg_vulnerabilities *parse_pkg_vulnerabilities(const char *, size_t, int)
 struct pkg_vulnerabilities *read_pkg_vulnerabilities(const char *, int, int);
 void free_pkg_vulnerabilities(struct pkg_vulnerabilities *);
 
+/* Helper functions for memory allocation */
+char *xstrdup(const char *);
+void *xrealloc(void *, size_t);
+void *xcalloc(size_t, size_t);
+void *xmalloc(size_t);
+#if defined(__GNUC__) && __GNUC__ >= 2
+char	*xasprintf(const char *, ...)
+			   __attribute__((__format__(__printf__, 1, 2)));
+#else
+char	*xasprintf(const char *, ...);
+#endif
+
 /* Externs */
 extern Boolean Verbose;
 extern Boolean Fake;
diff --git a/external/pkgdb.c b/external/pkgdb.c
index a687555..8a5a671 100644
--- a/external/pkgdb.c
+++ b/external/pkgdb.c
@@ -1,20 +1,7 @@
-/*	$NetBSD: pkgdb.c,v 1.1.1.1 2008/09/30 19:00:27 joerg Exp $	*/
-
-#if HAVE_CONFIG_H
-#include "config.h"
-#endif
-#if HAVE_NBCOMPAT_H
-#include <nbcompat.h>
-#endif
-#if HAVE_SYS_CDEFS_H
-#include <sys/cdefs.h>
-#endif
-#ifndef lint
-__RCSID("$NetBSD: pkgdb.c,v 1.1.1.1 2008/09/30 19:00:27 joerg Exp $");
-#endif
+/* NetBSD: pkgdb.c,v 1.39 2010/04/20 21:22:38 joerg Exp */
 
 /*-
- * Copyright (c) 1999-2008 The NetBSD Foundation, Inc.
+ * Copyright (c) 1999-2010 The NetBSD Foundation, Inc.
  * All rights reserved.
  *
  * This code is derived from software contributed to The NetBSD Foundation
@@ -42,313 +29,39 @@ __RCSID("$NetBSD: pkgdb.c,v 1.1.1.1 2008/09/30 19:00:27 joerg Exp $");
  * POSSIBILITY OF SUCH DAMAGE.
  */
 
-#if HAVE_DB_185_H
-#include <db_185.h>
-#elif HAVE_DB1_DB_H
-#include <db1/db.h>
-#elif HAVE_DB_H
-#include <db.h>
-#endif
-#if HAVE_ERR_H
-#include <err.h>
-#endif
-#if HAVE_ERRNO_H
-#include <errno.h>
-#endif
-#if HAVE_FCNTL_H
-#include <fcntl.h>
-#endif
-#if HAVE_STDARG_H
-#include <stdarg.h>
-#endif
-#if HAVE_STDIO_H
-#include <stdio.h>
-#endif
-#if HAVE_STRING_H
-#include <string.h>
-#endif
-#if defined(HAVE_DBOPEN) || (defined(HAVE___DB185_OPEN) && defined(HAVE_DB_185_H))
-#define	HAVE_DBLIB	1
-#else
-#define	HAVE_DBLIB	0
-#endif
-
-#include "lib.h"
-
-#define PKGDB_FILE	"pkgdb.byfile.db"	/* indexed by filename */
-
 /*
- * Where we put logging information by default if PKG_DBDIR is unset.
+ * This is a much simplified version of pkgdb.c that provides what is required
+ * by the other files we have pulled from pkg_install.  It is also modified to
+ * set pkgdb_dir explicitly to what we have parsed from pkg_admin(1).
  */
-#ifndef DEF_LOG_DIR
-#define DEF_LOG_DIR		"/var/db/pkg"
-#endif
 
-/* just in case we change the environment variable name */
-#if 0 /* defined by upstream Makefile */
-#define PKG_DBDIR		"PKG_DBDIR"
-#endif
+#include "lib.h"
 
-#if HAVE_DBLIB
-static DB   *pkgdbp;
-#endif
 static char *pkgdb_dir = NULL;
-static char  pkgdb_cache[MaxPathSize];
+static int pkgdb_dir_prio = 0;
 
-#if HAVE_DBLIB
-/*
- *  Open the pkg-database
- *  Return value:
- *   1: everything ok
- *   0: error
- */
-int
-pkgdb_open(int mode)
+const char *
+pkgdb_get_dir(void)
 {
-	BTREEINFO info;
-	char	cachename[MaxPathSize];
-
-	/* try our btree format first */
-	info.flags = 0;
-	info.cachesize = 2*1024*1024;
-	info.maxkeypage = 0;
-	info.minkeypage = 0;
-	info.psize = 4096;
-	info.compare = NULL;
-	info.prefix = NULL;
-	info.lorder = 0;
-	pkgdbp = (DB *) dbopen(_pkgdb_getPKGDB_FILE(cachename, sizeof(cachename)),
-	    (mode == ReadOnly) ? O_RDONLY : O_RDWR | O_CREAT,
-	    0644, DB_BTREE, (void *) &info);
-	return (pkgdbp != NULL);
+	return pkgdb_dir;
 }
 
-/*
- * Close the pkg database
- */
 void
-pkgdb_close(void)
-{
-	if (pkgdbp != NULL) {
-		(void) (*pkgdbp->close) (pkgdbp);
-		pkgdbp = NULL;
-	}
-}
-
-/*
- * Store value "val" with key "key" in database
- * Return value is as from ypdb_store:
- *  0: ok
- *  1: key already present
- * -1: some other error, see errno
- */
-int
-pkgdb_store(const char *key, const char *val)
-{
-	DBT     keyd, vald;
-
-	if (pkgdbp == NULL)
-		return -1;
-
-	keyd.data = (void *) key;
-	keyd.size = strlen(key) + 1;
-	vald.data = (void *) val;
-	vald.size = strlen(val) + 1;
-
-	if (keyd.size > MaxPathSize || vald.size > MaxPathSize)
-		return -1;
-
-	return (*pkgdbp->put) (pkgdbp, &keyd, &vald, R_NOOVERWRITE);
-}
-
-/*
- * Recall value for given key
- * Return value:
- *  NULL if some error occurred or value for key not found (check errno!)
- *  String for "value" else
- */
-char   *
-pkgdb_retrieve(const char *key)
-{
-	DBT     keyd, vald;
-	int     status;
-
-	if (pkgdbp == NULL)
-		return NULL;
-
-	keyd.data = (void *) key;
-	keyd.size = strlen(key) + 1;
-	errno = 0;		/* to be sure it's 0 if the key doesn't match anything */
-
-	vald.data = (void *)NULL;
-	vald.size = 0;
-	status = (*pkgdbp->get) (pkgdbp, &keyd, &vald, 0);
-	if (status) {
-		vald.data = NULL;
-		vald.size = 0;
-	}
-
-	return vald.data;
-}
-
-/* dump contents of the database to stdout */
-int
-pkgdb_dump(void)
-{
-	DBT     key;
-	DBT	val;
-	int	type;
-
-	if (pkgdb_open(ReadOnly)) {
-		for (type = R_FIRST ; (*pkgdbp->seq)(pkgdbp, &key, &val, type) == 0 ; type = R_NEXT) {
-			printf("file: %.*s pkg: %.*s\n",
-				(int) key.size, (char *) key.data,
-				(int) val.size, (char *) val.data);
-		}
-		pkgdb_close();
-		return 0;
-	} else
-		return -1;
-}
-
-/*
- *  Remove data set from pkgdb
- *  Return value as ypdb_delete:
- *   0: everything ok
- *   1: key not present
- *  -1: some error occurred (see errno)
- */
-int
-pkgdb_remove(const char *key)
+pkgdb_set_dir(const char *dir, int prio)
 {
-	DBT     keyd;
+	if (prio < pkgdb_dir_prio)
+		return;
 
-	if (pkgdbp == NULL)
-		return -1;
+	pkgdb_dir_prio = prio;
 
-	keyd.data = (char *) key;
-	keyd.size = strlen(key) + 1;
-	if (keyd.size > MaxPathSize)
-		return -1;
+	if (dir == pkgdb_dir)
+		return;
 
-	return (*pkgdbp->del) (pkgdbp, &keyd, 0);
-}
-
-/*
- *  Remove any entry from the cache which has a data field of `pkg'.
- *  Return value:
- *   1: everything ok
- *   0: error
- */
-int
-pkgdb_remove_pkg(const char *pkg)
-{
-	DBT     data;
-	DBT     key;
-	int	type;
-	int	ret;
-	int	cc;
-	char	cachename[MaxPathSize];
-
-	if (pkgdbp == NULL) {
-		return 0;
-	}
-	(void) _pkgdb_getPKGDB_FILE(cachename, sizeof(cachename));
-	cc = strlen(pkg);
-	for (ret = 1, type = R_FIRST; (*pkgdbp->seq)(pkgdbp, &key, &data, type) == 0 ; type = R_NEXT) {
-		if ((cc + 1) == data.size && strncmp(data.data, pkg, cc) == 0) {
-			if (Verbose) {
-				printf("Removing file `%s' from %s\n", (char *)key.data, cachename);
-			}
-			switch ((*pkgdbp->del)(pkgdbp, &key, 0)) {
-			case -1:
-				warn("Error removing `%s' from %s", (char *)key.data, cachename);
-				ret = 0;
-				break;
-			case 1:
-				warn("Key `%s' not present in %s", (char *)key.data, cachename);
-				ret = 0;
-				break;
-
-			}
-		}
-	}
-	return ret;
-}
-
-#else /* !HAVE_DBLIB */
-
-int	pkgdb_open(int mode) { return 1; }
-void	pkgdb_close(void) {}
-int	pkgdb_store(const char *key, const char *val) { return 0; }
-char   *pkgdb_retrieve(const char *key) { return NULL; }
-int	pkgdb_dump(void) { return 0; }
-int	pkgdb_remove(const char *key) { return 0; }
-int	pkgdb_remove_pkg(const char *pkg) { return 1; }
-
-#endif /* HAVE_DBLIB */
-
-/*
- *  Return the location of the package reference counts database directory.
- */
-char *
-pkgdb_refcount_dir(void)
-{
-	static char buf[MaxPathSize];
-	char *tmp;
-
-	if ((tmp = getenv(PKG_REFCOUNT_DBDIR_VNAME)))
-		strlcpy(buf, tmp, sizeof(buf));
-	else
-		snprintf(buf, sizeof(buf), "%s.refcount", _pkgdb_getPKGDB_DIR());
-	return buf;
-}
-
-/*
- *  Return name of cache file in the buffer that was passed.
- */
-char *
-_pkgdb_getPKGDB_FILE(char *buf, unsigned size)
-{
-	(void) snprintf(buf, size, "%s/%s", _pkgdb_getPKGDB_DIR(), PKGDB_FILE);
-	return buf;
-}
-
-/*
- *  Return directory where pkgdb is stored
- */
-const char *
-_pkgdb_getPKGDB_DIR(void)
-{
-	char *tmp;
-
-	if (pkgdb_dir == NULL) {
-		if ((tmp = getenv(PKG_DBDIR)))
-			_pkgdb_setPKGDB_DIR(tmp);
-		else
-			_pkgdb_setPKGDB_DIR(DEF_LOG_DIR);
-	}
-
-	return pkgdb_dir;
-}
-
-/*
- *  Set the first place we look for where pkgdb is stored.
- */
-void
-_pkgdb_setPKGDB_DIR(const char *dir)
-{
-	(void) snprintf(pkgdb_cache, sizeof(pkgdb_cache), "%s", dir);
-	pkgdb_dir = pkgdb_cache;
+	pkgdb_dir = xstrdup(dir);
 }
 
 char *
 pkgdb_pkg_file(const char *pkg, const char *file)
 {
-	char *buf;
-
-	if (asprintf(&buf, "%s/%s/%s", _pkgdb_getPKGDB_DIR(), pkg, file) == -1)
-		err(EXIT_FAILURE, "asprintf failed");
-
-	return buf;
+	return xasprintf("%s/%s/%s", pkgdb_get_dir(), pkg, file);
 }
diff --git a/external/xwrapper.c b/external/xwrapper.c
new file mode 100644
index 0000000..0b3bb23
--- /dev/null
+++ b/external/xwrapper.c
@@ -0,0 +1,100 @@
+/* NetBSD: xwrapper.c,v 1.2 2009/02/02 12:35:01 joerg Exp */
+
+/*-
+ * Copyright (c) 2008 Joerg Sonnenberger <joerg@NetBSD.org>.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#if HAVE_CONFIG_H
+#include "config.h"
+#endif
+#if HAVE_NBCOMPAT_H
+#include <nbcompat.h>
+#endif
+
+#if HAVE_ERR_H
+#include <err.h>
+#endif
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "lib.h"
+
+char *
+xasprintf(const char *fmt, ...)
+{
+	va_list ap;
+	char *buf;
+
+	va_start(ap, fmt);
+	if (vasprintf(&buf, fmt, ap) == -1)
+		err(1, "asprintf failed");
+	va_end(ap);
+	return buf;
+}
+
+void *
+xmalloc(size_t len)
+{
+	void *ptr;
+
+	if ((ptr = malloc(len)) == NULL)
+		err(1, "malloc failed");
+	return ptr;
+}
+
+void *
+xcalloc(size_t len, size_t n)
+{
+	void *ptr;
+
+	if ((ptr = calloc(len, n)) == NULL)
+		err(1, "calloc failed");
+	return ptr;
+}
+
+void *
+xrealloc(void *buf, size_t len)
+{
+	void *ptr;
+
+	if ((ptr = realloc(buf, len)) == NULL)
+		err(1, "realloc failed");
+	return ptr;
+}
+
+char *
+xstrdup(const char *str)
+{
+	char *buf;
+
+	if ((buf = strdup(str)) == NULL)
+		err(1, "strdup failed");
+	return buf;
+}
diff --git a/fsops.c b/fsops.c
index 5d45b62..1dcb700 100644
--- a/fsops.c
+++ b/fsops.c
@@ -98,19 +98,6 @@ clean_cache()
 	closedir(dp);
 }
 
-void
-create_dirs()
-{
-	/* create database repository */
-	if(-1 == mkdir(PKGIN_DB, 0755) && errno != EEXIST) 
-		errx(EXIT_FAILURE, MSG_MKDIR_DB_REPOSITORY_FAILED, 
-						strerror(errno));
-	/* create cache repository */
-	if(-1 == mkdir(pkgin_cache, 0755) && errno != EEXIST)
-		errx(EXIT_FAILURE, MSG_MKDIR_CACHE_REPOSITORY_FAILED,
-						strerror(errno));
-}
-
 char *
 read_repos()
 {
diff --git a/main.c b/main.c
index 974b014..adc6d23 100644
--- a/main.c
+++ b/main.c
@@ -132,18 +132,11 @@ main(int argc, char *argv[])
 			errx(-1, MSG_CHDIR_FAILED);
 	}
 
-	/* check for pkg_install */
-	if (stat(PKG_ADD, &sb) < 0)
-		errx(EXIT_FAILURE, MSG_PKG_INSTALL_NOT_PRESENT);
-
-	/* retrieve PKG_DBDIR from pkg_admin(1) */
-	get_pkg_dbdir();
-
-	/* for pkg_install */
-	unsetenv("PKG_PATH");
-	/* create base directories */
-	if (stat(pkgin_cache, &sb) < 0)
-		create_dirs();
+	/* Configure pkg_install */
+	setup_pkg_install();
+
+	/* Configure pkgin database directory */
+	setup_pkgin_dbdir();
 
 	pkgindb_init();
 
diff --git a/pkg_infos.c b/pkg_infos.c
index 5b5005c..846ef30 100644
--- a/pkg_infos.c
+++ b/pkg_infos.c
@@ -43,8 +43,8 @@ show_pkg_info(char flag, char *pkgname)
 
 	/* loop through PKG_REPOS */
 	for (prepos = pkg_repos; *prepos != NULL; prepos++) {
-		snprintf(cmd, BUFSIZ,
-			PKG_INFO" -%c %s/%s%s", flag, *prepos, fullpkgname, PKG_EXT);
+		snprintf(cmd, BUFSIZ, "%s -%c %s/%s%s",
+		    pkg_info, flag, *prepos, fullpkgname, PKG_EXT);
 
 		if ((out_cmd = exec_list(cmd, NULL)) == NULL)
 			continue;
diff --git a/pkg_install.c b/pkg_install.c
new file mode 100644
index 0000000..b949c67
--- /dev/null
+++ b/pkg_install.c
@@ -0,0 +1,87 @@
+/*
+ * Copyright (c) 2018 The NetBSD Foundation, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/*
+ * Routines for configuring and using pkg_install utilities.
+ */
+
+#include "pkgin.h"
+
+char *pkg_install_dir;
+char *pkg_add;
+char *pkg_admin;
+char *pkg_delete;
+char *pkg_info;
+
+/*
+ * Configure the location to pkg_install used in this instance, either via the
+ * PKG_INSTALL_DIR environment variable or the default compiled-in location.
+ */
+void
+setup_pkg_install()
+{
+	FILE *fp;
+	char *line, *p;
+	size_t len;
+	ssize_t llen;
+
+	if ((p = getenv("PKG_INSTALL_DIR")) != NULL)
+		pkg_install_dir = xstrdup(p);
+	else
+		pkg_install_dir = xstrdup(PKGTOOLS);
+
+	pkg_add = xasprintf("%s/pkg_add", pkg_install_dir);
+	pkg_admin = xasprintf("%s/pkg_admin", pkg_install_dir);
+	pkg_info = xasprintf("%s/pkg_info", pkg_install_dir);
+	pkg_delete = xasprintf("%s/pkg_delete", pkg_install_dir);
+
+	/* Sanity check */
+	if (access(pkg_admin, X_OK) != 0)
+		err(EXIT_FAILURE, "Cannot execute %s", pkg_admin);
+
+	/* Ensure pkg_install only looks at our specified paths */
+	unsetenv("PKG_PATH");
+
+	/* Get PKG_DBDIR from pkg_admin */
+	p = xasprintf("%s config-var PKG_DBDIR", pkg_admin);
+
+	if ((fp = popen(p, "r")) == NULL)
+		err(EXIT_FAILURE, "Cannot execute '%s'", p);
+
+	line = NULL; len = 0;
+	while ((llen = getline(&line, &len, fp)) > 0) {
+		if (line[llen - 1] == '\n')
+			line[llen - 1] = '\0';
+		pkgdb_set_dir(line, 1);
+	}
+	pclose(fp);
+
+	free(line);
+	free(p);
+
+	if (pkgdb_get_dir() == NULL)
+		errx(EXIT_FAILURE, "Could not determine PKG_DBDIR");
+}
diff --git a/pkgin.h b/pkgin.h
index fa31da6..15e0e7a 100644
--- a/pkgin.h
+++ b/pkgin.h
@@ -48,17 +48,7 @@
 #include "lib.h"
 #include "dewey.h"
 
-#ifndef PKGTOOLS
-#define PKGTOOLS "/usr/sbin"
-#endif
-#define PKG_DELETE PKGTOOLS"/pkg_delete"
-#define PKG_ADD PKGTOOLS"/pkg_add"
-#define PKG_INFO PKGTOOLS"/pkg_info"
-
 #define PKG_SUMMARY "pkg_summary"
-#define PKGIN_SQL_LOG PKGIN_DB"/sql.log"
-#define PKG_INSTALL_ERR_LOG PKGIN_DB"/pkg_install-err.log"
-#define PKGIN_CACHE PKGIN_DB"/cache"
 #define PKG_EXT ".tgz"
 #define PKGIN_CONF PKG_SYSCONFDIR"/pkgin"
 #define REPOS_FILE "repositories.conf"
@@ -210,10 +200,8 @@ extern int		r_plistcounter;
 extern int		l_plistcounter;
 extern char		*env_repos;
 extern char		**pkg_repos;
-extern const char	*pkgin_cache;
 extern char  		lslimit;
 extern char		pkgtools_flags[];
-extern char		pkg_dbdir[];
 extern Plisthead	r_plisthead;
 extern Plisthead	l_plisthead;
 extern FILE		*tracefp;
@@ -269,7 +257,6 @@ void		pkg_keep(int, char **);
 int		fs_has_room(const char *, int64_t);
 uint64_t	fs_room(const char *);
 void		clean_cache(void);
-void		create_dirs(void);
 char		*read_repos(void);
 /* pkg_str.c */
 char	   	*unique_pkg(const char *, const char *);
@@ -289,7 +276,24 @@ int		pkg_has_conflicts(Pkglist *);
 void		show_prov_req(const char *, const char *);
 /* pkg_infos.c */
 void		show_pkg_info(char, char *);
+
+/* pkg_install.c */
+extern char	*pkg_install_dir;
+extern char	*pkg_add;
+extern char	*pkg_admin;
+extern char	*pkg_delete;
+extern char	*pkg_info;
+void		setup_pkg_install(void);
+
 /* pkgindb.c */
-void		get_pkg_dbdir(void);
+#define PRIVS_PKGDB	0x1
+#define PRIVS_PKGINDB	0x2
+extern char	*pkgin_dbdir;
+extern char	*pkgin_sqldb;
+extern char	*pkgin_cache;
+extern char	*pkgin_errlog;
+extern char	*pkgin_sqllog;
+void		setup_pkgin_dbdir(void);
+uint8_t		have_privs(int);
 
 #endif
diff --git a/pkgindb.c b/pkgindb.c
index be7bd6d..c6f495a 100644
--- a/pkgindb.c
+++ b/pkgindb.c
@@ -50,27 +50,49 @@ static const char *pragmaopts[] = {
 	NULL
 };
 
-char pkg_dbdir[BUFSIZ];
+char *pkgin_dbdir;
+char *pkgin_sqldb;
+char *pkgin_cache;
+char *pkgin_errlog;
+char *pkgin_sqllog;
 
 void
-get_pkg_dbdir(void)
+setup_pkgin_dbdir(void)
 {
-	char **exec_cmd;
-
-	if ((exec_cmd =
-		exec_list(PKGTOOLS"/pkg_admin config-var PKG_DBDIR", NULL))
-		== NULL)
-		strcpy(pkg_dbdir, PKG_DBDIR);
-	else {
-		XSTRCPY(pkg_dbdir, exec_cmd[0]);
-		free_list(exec_cmd);
+	char *p;
+
+	if ((p = getenv("PKGIN_DBDIR")) != NULL)
+		pkgin_dbdir = xasprintf("%s", p);
+	else
+		pkgin_dbdir = xasprintf("%s", PKGIN_DBDIR);
+
+	pkgin_sqldb = xasprintf("%s/pkgin.db", pkgin_dbdir);
+	pkgin_cache = xasprintf("%s/cache", pkgin_dbdir);
+	pkgin_errlog = xasprintf("%s/pkg_install-err.log", pkgin_dbdir);
+	pkgin_sqllog = xasprintf("%s/sql.log", pkgin_dbdir);
+
+	if (access(pkgin_dbdir, F_OK) != 0) {
+		if (mkdir(pkgin_dbdir, 0755) < 0)
+			err(1, "Failed to create %s", pkgin_dbdir);
+	}
+
+	if (access(pkgin_cache, F_OK) != 0) {
+		if (mkdir(pkgin_cache, 0755) < 0)
+			err(1, "Failed to create %s", pkgin_cache);
 	}
 }
 
 uint8_t
-have_enough_rights()
+have_privs(int reqd)
 {
-	if (access(pkg_dbdir, W_OK) < 0 || access(pkg_dbdir, W_OK) < 0)
+	if ((reqd & PRIVS_PKGDB) &&
+	    (access(pkgdb_get_dir(), F_OK) == 0) &&
+	    (access(pkgdb_get_dir(), W_OK) < 0))
+		return 0;
+
+	if ((reqd & PRIVS_PKGINDB) &&
+	    (access(pkgin_dbdir, F_OK) == 0) &&
+	    (access(pkgin_dbdir, W_OK) < 0))
 		return 0;
 
 	return 1;
@@ -184,13 +206,13 @@ pkgindb_init()
 	char buf[BUFSIZ];
 
 	/*
-	 * Do not exit if PKGIN_SQL_LOG is not writable.
+	 * Do not exit if pkgin_sqllog is not writable.
 	 * Permit users to do list-operations
 	 */
-	sql_log_fp = fopen(PKGIN_SQL_LOG, "w");
+	sql_log_fp = fopen(pkgin_sqllog, "w");
 
-	if (sqlite3_open(PDB, &pdb) != SQLITE_OK)
-		pdb_err("Can't open database " PDB);
+	if (sqlite3_open(pkgin_sqldb, &pdb) != SQLITE_OK)
+		pdb_err("Can't open database");
 
 	/* generic query in order to check tables existence */
 	if (pkgindb_doquery("select * from sqlite_master;",
@@ -214,8 +236,8 @@ pkgindb_reset()
 {
 	pkgindb_close();
 
-	if (unlink(PDB) < 0)
-		err(EXIT_FAILURE, MSG_DELETE_DB_FAILED, PDB);
+	if (unlink(pkgin_sqldb) < 0)
+		err(EXIT_FAILURE, MSG_DELETE_DB_FAILED, pkgin_sqldb);
 
 	pkgindb_init();
 }
@@ -223,14 +245,15 @@ pkgindb_reset()
 int
 pkg_db_mtime()
 {
-	uint8_t		pkgdb_present = 1;
 	struct stat	st;
 	time_t	   	db_mtime = 0;
 	char		str_mtime[20], buf[BUFSIZ];
 
+	snprintf(buf, BUFSIZ, "%s/pkgdb.byfile.db", pkgin_dbdir);
+
 	/* no pkgdb file */
-	if (stat(pkg_dbdir, &st) < 0)
-		pkgdb_present = 0;
+	if (stat(pkgdb_get_dir(), &st) < 0)
+		return 0;
 
 	str_mtime[0] = '\0';
 
@@ -241,7 +264,7 @@ pkg_db_mtime()
 		db_mtime = (time_t)strtol(str_mtime, (char **)NULL, 10);
 
 	/* mtime is up to date */
-	if (!pkgdb_present || db_mtime == st.st_mtime)
+	if (db_mtime == st.st_mtime)
 		return 0;
 
 	snprintf(buf, BUFSIZ, UPDATE_PKGDB_MTIME, (long long)st.st_mtime);
diff --git a/pkgindb.h b/pkgindb.h
index a982978..4d7c422 100644
--- a/pkgindb.h
+++ b/pkgindb.h
@@ -77,9 +77,6 @@ extern const char SHOW_ALL_CATEGORIES[];
 #define LOCAL_PKG "LOCAL_PKG"
 #define REMOTE_PKG "REMOTE_PKG"
 
-#define PDB PKGIN_DB"/pkgin.db"
-
-uint8_t		have_enough_rights(void);
 const char	*pdb_version(void);
 uint8_t		upgrade_database(void);
 void		pkgindb_init(void);
diff --git a/summary.c b/summary.c
index 0392c61..56cfd02 100644
--- a/summary.c
+++ b/summary.c
@@ -565,12 +565,9 @@ update_localdb(char **pkgkeep)
 	Pkglist		*pkglist;
 
 	/* has the pkgdb (pkgsrc) changed ? if not, continue */
-	if (!pkg_db_mtime() || !pkgdb_open(ReadWrite))
+	if (!pkg_db_mtime())
 		return;
 
-	/* just checking */
-	pkgdb_close();
-
 	/* record the keep list */
 	keeplisthead = rec_pkglist(KEEP_LOCAL_PKGS);
 	/* delete local pkg table (faster than updating) */
@@ -709,7 +706,7 @@ update_remotedb(void)
 int
 update_db(int which, char **pkgkeep)
 {
-	if (!have_enough_rights())
+	if (!have_privs(PRIVS_PKGINDB))
 		return EXIT_FAILURE;
 
 	/* always check for LOCAL_SUMMARY updates */
